{"version":3,"sources":["useStripe.tsx"],"names":["APPLE_PAY_NOT_SUPPORTED_MESSAGE","useStripe","isApplePaySupported","setApplePaySupported","checkApplePaySupport","isiOS","StripeSdk","isSupported","createPaymentMethod","data","options","NativeStripeSdk","paymentMethod","error","retrievePaymentIntent","clientSecret","paymentIntent","confirmPaymentMethod","paymentIntentClientSecret","presentApplePay","params","code","ApplePayError","Canceled","message","updateApplePaySummaryItems","summaryItems","confirmApplePayPayment","handleCardAction","confirmSetupIntent","setupIntent","createTokenForCVCUpdate","cvc","tokenId","handleURLCallback","url","stripeHandled","confirmPayment"],"mappings":"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","sourcesContent":["import {\n  PaymentMethodCreateParams,\n  ApplePayError,\n  ApplePay,\n  CreatePaymentMethodResult,\n  RetrievePaymentIntentResult,\n  ConfirmPaymentMethodResult,\n  HandleCardActionResult,\n  ConfirmSetupIntentResult,\n  CreateTokenForCVCUpdateResult,\n  ApplePayResult,\n  ConfirmSetupIntent,\n} from '../types';\nimport { useCallback, useEffect, useState } from 'react';\nimport { isiOS, createError } from '../helpers';\nimport NativeStripeSdk from '../NativeStripeSdk';\nimport StripeSdk from '../NativeStripeSdk';\n\nconst APPLE_PAY_NOT_SUPPORTED_MESSAGE =\n  'Apple pay is not supported on this device';\n\n/**\n * useStripe hook\n */\nexport function useStripe() {\n  const [isApplePaySupported, setApplePaySupported] = useState(false);\n\n  useEffect(() => {\n    async function checkApplePaySupport() {\n      const isSupported = isiOS ?? (await StripeSdk.isApplePaySupported());\n      setApplePaySupported(isSupported);\n    }\n\n    checkApplePaySupport();\n  }, []);\n\n  const createPaymentMethod = useCallback(\n    async (\n      data: PaymentMethodCreateParams.Params,\n      options: PaymentMethodCreateParams.Options = {}\n    ): Promise<CreatePaymentMethodResult> => {\n      try {\n        const paymentMethod = await NativeStripeSdk.createPaymentMethod(\n          data,\n          options\n        );\n        return {\n          paymentMethod,\n        };\n      } catch (error) {\n        return {\n          error: createError(error),\n        };\n      }\n    },\n    []\n  );\n\n  const retrievePaymentIntent = useCallback(\n    async (clientSecret: string): Promise<RetrievePaymentIntentResult> => {\n      try {\n        const paymentIntent = await NativeStripeSdk.retrievePaymentIntent(\n          clientSecret\n        );\n        return {\n          paymentIntent,\n        };\n      } catch (error) {\n        return {\n          error: createError(error),\n        };\n      }\n    },\n    []\n  );\n\n  const confirmPaymentMethod = useCallback(\n    async (\n      paymentIntentClientSecret: string,\n      data: PaymentMethodCreateParams.Params,\n      options: PaymentMethodCreateParams.Options = {}\n    ): Promise<ConfirmPaymentMethodResult> => {\n      try {\n        const paymentIntent = await NativeStripeSdk.confirmPaymentMethod(\n          paymentIntentClientSecret,\n          data,\n          options\n        );\n        return {\n          paymentIntent,\n        };\n      } catch (error) {\n        return {\n          error: createError(error),\n        };\n      }\n    },\n    []\n  );\n\n  const presentApplePay = useCallback(\n    async (params: ApplePay.PresentParams): Promise<ApplePayResult> => {\n      if (!isApplePaySupported) {\n        return {\n          error: {\n            code: ApplePayError.Canceled,\n            message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n          },\n        };\n      }\n\n      try {\n        await NativeStripeSdk.presentApplePay(params);\n\n        return {};\n      } catch (error) {\n        return {\n          error: createError(error),\n        };\n      }\n    },\n    [isApplePaySupported]\n  );\n\n  const updateApplePaySummaryItems = useCallback(\n    async (\n      summaryItems: ApplePay.CartSummaryItem[]\n    ): Promise<ApplePayResult> => {\n      if (!isApplePaySupported) {\n        return {\n          error: {\n            code: ApplePayError.Canceled,\n            message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n          },\n        };\n      }\n\n      try {\n        await NativeStripeSdk.updateApplePaySummaryItems(summaryItems);\n\n        return {};\n      } catch (error) {\n        return {\n          error: createError(error),\n        };\n      }\n    },\n    [isApplePaySupported]\n  );\n\n  const confirmApplePayPayment = useCallback(\n    async (clientSecret: string): Promise<ApplePayResult> => {\n      if (!isApplePaySupported) {\n        return {\n          error: {\n            code: ApplePayError.Canceled,\n            message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n          },\n        };\n      }\n      try {\n        await NativeStripeSdk.confirmApplePayPayment(clientSecret);\n        return {};\n      } catch (error) {\n        return {\n          error: createError(error),\n        };\n      }\n    },\n    [isApplePaySupported]\n  );\n\n  const handleCardAction = useCallback(\n    async (\n      paymentIntentClientSecret: string\n    ): Promise<HandleCardActionResult> => {\n      try {\n        const paymentIntent = await NativeStripeSdk.handleCardAction(\n          paymentIntentClientSecret\n        );\n        return {\n          paymentIntent,\n        };\n      } catch (error) {\n        return {\n          error: createError(error),\n        };\n      }\n    },\n    []\n  );\n\n  const confirmSetupIntent = useCallback(\n    async (\n      paymentIntentClientSecret: string,\n      data: ConfirmSetupIntent.Params,\n      options: ConfirmSetupIntent.Options = {}\n    ): Promise<ConfirmSetupIntentResult> => {\n      try {\n        const setupIntent = await NativeStripeSdk.confirmSetupIntent(\n          paymentIntentClientSecret,\n          data,\n          options\n        );\n\n        return {\n          setupIntent,\n        };\n      } catch (error) {\n        return {\n          error: createError(error),\n        };\n      }\n    },\n    []\n  );\n\n  const createTokenForCVCUpdate = useCallback(async (cvc: string): Promise<\n    CreateTokenForCVCUpdateResult\n  > => {\n    try {\n      const tokenId = await NativeStripeSdk.createTokenForCVCUpdate(cvc);\n\n      return {\n        tokenId,\n      };\n    } catch (error) {\n      return {\n        error: createError(error),\n      };\n    }\n  }, []);\n\n  const handleURLCallback = useCallback(async (url: string): Promise<\n    boolean\n  > => {\n    const stripeHandled = await NativeStripeSdk.handleURLCallback(url);\n    return stripeHandled;\n  }, []);\n\n  return {\n    retrievePaymentIntent: retrievePaymentIntent,\n    confirmPayment: confirmPaymentMethod,\n    createPaymentMethod: createPaymentMethod,\n    handleCardAction: handleCardAction,\n    isApplePaySupported: isApplePaySupported,\n    presentApplePay: presentApplePay,\n    confirmApplePayPayment: confirmApplePayPayment,\n    confirmSetupIntent: confirmSetupIntent,\n    createTokenForCVCUpdate: createTokenForCVCUpdate,\n    updateApplePaySummaryItems: updateApplePaySummaryItems,\n    handleURLCallback: handleURLCallback,\n  };\n}\n"]}